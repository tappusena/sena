//Algorithm
/*1. Push Operation:
   1. Start.
   2. Create a new node.
   3. Insert the data into the new node.
   4. Link the new node to the current top of the stack.
   5. Set the new node as the top.
   6. End.

 2. Pop Operation:
   1. Start.
   2. Check if the stack is empty (top == NULL).
      - If empty, print "Stack Underflow" and exit.
   3. If the stack is not empty:
      - Remove the top node.
      - Move the top pointer to the next node.
      - Free the memory of the removed node.
   4. End.

 3. Display Operation:
   1. Start.
   2. Check if the stack is empty (top == NULL).
      - If empty, print "Stack is empty" and exit.
   3. If the stack is not empty:
      - Traverse the stack from the top to the bottom and print each element.
   4. End.
*/
struct Node
{
   int data;
   Node *next;
}*top=NULL;

class Stack_LL{
    public:
    void push(int num){
        Node *temp=new Node();
        temp->data=num;
        if (top==NULL){
            //Stack is empty
            temp->next=NULL;
        }
        else{
            temp->next=top;
        }
        top=temp;
    }
    void pop(){
        if (top==NULL){
            cout<<"Stack is empty"<<endl;
        }
        else{
            Node *temp=top;
            cout<<"Deleting "<<temp->data<<endl;
            top=temp->next;
            delete temp;
        }
    }
    void display(){
        Node *temp=top;
        if (temp==NULL){
            cout<<"Stack is empty"<<endl;
        }
        else{
            while(temp!=NULL){
                cout<<temp->data<<" ";
                temp=temp->next;
            }
            cout<<endl;
        }
    }
};
int main()
{
    Stack_LL a;
  

    while (1)
    {

        int choice;
        cout << "\nMenu\n1.Push\n2.Pop\n3.Display\n4.Exiting\n";
        cout << "Enter your choice:: ";
        cin >> choice;

        switch (choice)
        {

        case 1:
            int ele;
            cout << "Enter the element ::";
            cin >> ele;
            a.push(ele);
            break;
        case 2:
            a.pop();
            break;
        case 3:
            a.display();
            break;
        case 4:
            exit(0);
        }
    }
}
