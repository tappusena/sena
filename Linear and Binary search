//Algorithm
//Linear Search:

//1. Start
//2. Initialize the array and the size of the array.
//3. Input the element to search (key).
//4. Initialize a flag to indicate whether the key is found or not.
//5. Iterate through each element of the array from the first element to the last:
  // - Compare the current element with the key.
  // - If the current element matches the key:
   //  - Output the position of the key.
   //  - Set the flag to indicate the key is found.
   //  - Exit the loop.
//6. If the key is not found (flag remains unchanged):
   //- Output "key not found".
//7. End

 //Binary Search:

//1. Start
//2. Initialize the array, the size of the array, and the search range (first and last indices).
//3. Input the element to search (key).
//4. Initialize a flag to indicate whether the key is found or not.
//5. While the search range is valid (first index is less than or equal to the last index):
  // - Calculate the middle index of the current search range.
  //- Compare the middle element with the key:
    //- If the middle element matches the key:
     // - Output the position of the key.
      // - Set the flag to indicate the key is found.
      // - Exit the loop.
    // - If the key is greater than the middle element:
       //- Update the search range to the upper half (set first index to mid + 1).
     //- If the key is less than the middle element:
       //- Update the search range to the lower half (set last index to mid - 1).
//6. If the key is not found (flag remains unchanged):
  // - Output "key not found".
//7. End

#include <iostream>

using namespace std;

// Function for Linear Search
void linearSearch(int arr[], int size, int key) {
    bool found = false; // Flag to indicate if key is found

    for (int i = 0; i < size; i++) {
        if (arr[i] == key) {
            cout << "Linear Search: Key found at position " << i + 1 << endl;
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Linear Search: Key not found" << endl;
    }
}

// Function for Binary Search
void binarySearch(int arr[], int size, int key) {
    int first = 0;
    int last = size - 1;
    bool found = false; // Flag to indicate if key is found

    while (first <= last) {
        int mid = first + (last - first) / 2; // To avoid overflow

        if (arr[mid] == key) {
            cout << "Binary Search: Key found at position " << mid + 1 << endl;
            found = true;
            break;
        } else if (arr[mid] < key) {
            first = mid + 1; // Search in the upper half
        } else {
            last = mid - 1; // Search in the lower half
        }
    }

    if (!found) {
        cout << "Binary Search: Key not found" << endl;
    }
}

int main() {
    int size;

    // Input size of the array
    cout << "Enter the size of the array: ";
    cin >> size;

    int arr[size];

    // Input elements of the array
    cout << "Enter " << size << " elements of the array: ";
    for (int i = 0; i < size; i++) {
        cin >> arr[i];
    }

    int key;
    // Input the element to search (key)
    cout << "Enter the element to search: ";
    cin >> key;

    // Perform Linear Search
    linearSearch(arr, size, key);

    // Inform the user about sorting
    cout << "Note: Array sorted for Binary Search." << endl;

    // Perform Binary Search
    binarySearch(arr, size, key);

    return 0;
}
