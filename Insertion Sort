//Alogritm :
//1.	Start with the second element of the list, considering the first element as the sorted portion.
//2.	Compare the current element with the elements in the sorted portion, moving larger elements one position to the right until the correct position for the current element is found.
//3.	Insert the current element into its correct position in the sorted portion and repeat the process for each subsequent element until the entire list is sorted.
//1.	Start
//2.	Input the array with size n.
//3.	Begin Insertion Sort:
//o	For i = 1 to n-1 (where n is the size of the array):
//▪	Set temp to ar[i] (the current element to be inserted).
//▪	Initialize j = i - 1 (the index of the last element in the sorted portion).
//▪	While j >= 0 and ar[j] > temp:
//▪	Shift ar[j] to the right:
//▪	Set ar[j + 1] to ar[j].
//▪	Decrement j by 1.
//▪	Insert temp at position j + 1:
//▪	Set ar[j + 1] to temp.
//4.	End Insertion Sort
//5.	Display the sorted array.
//6.	End

//INSERTION SORT
#include <iostream>
using namespace std;

void insertionSort(int arr[], int n){
    for (int i=0; i<n; i++){
        int curr=arr[i];
        int prev=i-1;
        
        while(prev>=0 && arr[prev]>curr){
            arr[prev+1]=arr[prev];
            prev--;
        }
        arr[prev+1]=curr; //placing the current element in its correct position
    }
}
void printArray(int arr[], int n){
    for (int i =0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int main(){
    int n=5;
    int arr[]={4,1,3,5,2};
    
    insertionSort(arr, n);
    printArray(arr,n);
    return 0;
    
}
