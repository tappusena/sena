//Alogritm :
//1.	Start from the first element of the list and assume it is the minimum.
//2.	Compare this minimum with each subsequent element in the list to find the actual minimum element.
//3.	Swap the found minimum element with the first element, then repeat the process for the remaining unsorted portion of the list until the entire list is sorted.
//1.	Start
//2.	Input the array with size n.
//3.	Begin Selection Sort:
//o	For i = 0 to n-1 (where n is the size of the array):
//▪	Set min_index to i.
//▪	For j = i+1 to n-1:
//▪	If ar[j] < ar[min_index], then:
//▪	Set min_index to j.
//▪	If min_index is not equal to i, then:
//▪	Swap ar[i] and ar[min_index]:
//▪	Temporarily store ar[i] in temp.
//▪	Set ar[i] to ar[min_index].
//▪	Set ar[min_index] to temp.
//4.	End Selection Sort
//5.	Display the sorted array.
//6.	End

//INSERTION SORT
#include <iostream>
using namespace std;

void insertionSort(int arr[], int n){
    for (int i=0; i<n; i++){
        int curr=arr[i];
        int prev=i-1;
        
        while(prev>=0 && arr[prev]>curr){
            arr[prev+1]=arr[prev];
            prev--;
        }
        arr[prev+1]=curr; //placing the current element in its correct position
    }
}
void printArray(int arr[], int n){
    for (int i =0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}

int main(){
    int n=5;
    int arr[]={4,1,3,5,2};
    
    insertionSort(arr, n);
    printArray(arr,n);
    return 0;
    
}
