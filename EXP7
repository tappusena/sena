7.8 ALGORITHM
1. Start
2. Make the pin for selected ADC channel as a input pin
3. Turn on the ADC module of the AVR because it is disabled upon power on
reset to save power (ADCSRA)
4. Select the conversion speed. Use bits ADPS2:0 from ADCSRA register to
select conversion speed
5. Select voltage reference and ADC input channels. Use REFS0 and REFS1
bits in the ADMUX register to select voltage reference and the MUX4:0 bits
in ADMUX to select ADC input channels where LM35 is connected.
6. Activate the start of conversion by writing a one to the ADSC bit of ADCSRA
register.
7. Waite for the conversion t be completed by polling the ADIF bit in the ADSRA
register.
8. After the ADIF bit has gone high, read the ADCL and ADCH register to
get the digital data as a output. Notice that you have to read ADCL before
ADCH; otherwise result will not be valid.
9. Convert the digital output to equivalent degree Celsius using Celsius= (verf/1024
* digital output) / 10
10. If you want to read the selected channel again, go back to step 6
11. Display the ADC output on LCD
12. Stop.

/*
* EXPT7: To interface LM35 temperature sensor with AVR ATmega32 and display the surrounding temperature on the LCD16x2 display

*/

#define F_CPU 8000000UL         // Define CPU frequency as 8 MHz for delay functions
#include <avr/io.h>             // AVR I/O definitions (for ports, registers, etc.)
#include <util/delay.h>         // For using _delay_ms()
#include "LCD_1.h"              // Custom LCD library
#define DEGREE_SYMBOL 0xDF      // ASCII code for degree symbol (°) for LCD

// ----------- ADC Initialization Function ------------
void ADC_Init(){
	DDRA = 0x00;                 // Set PORTA as input (ADC channels are on PORTA)
	ADCSRA = 0x87;               // ADC Enable, Prescaler = 128 (ADEN=1, ADPS2:0=111)
	ADMUX = 0x40;                // Reference = AVCC (REFS0 = 1), ADC channel 0 selected initially
}

// ----------- ADC Read Function ------------
int ADC_Read(char channel){
	channel &= 0x07;             // Mask channel to stay within 0-7 range (only 3 LSBs used)
	ADMUX = (1<<REFS0) | channel; // Set AVCC as reference and select channel
	ADCSRA |= (1<<ADSC);         // Start conversion
	while (!(ADCSRA & (1<<ADIF))); // Wait for conversion to complete
	ADCSRA |= (1<<ADIF);         // Clear ADC interrupt flag
	_delay_ms(1);                // Small delay for safety
	return ADCW;                 // Return 10-bit ADC result
}

// ----------- Main Function ------------
int main(void)
{
	char Temperature1[10], Temperature2[10]; // Buffers to hold temperature strings for LCD
	float celsius1, celsius2;               // To hold calculated temperature values

	LCD_Init();    // Initialize LCD
	ADC_Init();    // Initialize ADC

	while(1) {
		LCD_Command(0x80);         // Move LCD cursor to first line
		LCD_String("Sohan Fulzele"); // Display name

		// ----- Read temperature from Sensor 1 (Channel 0) -----
		celsius1 = (ADC_Read(0) * 4.88) / 10.0;
		// Multiply ADC value by 4.88 to convert to millivolts (5V/1024 ? 4.88mV)
		// Then divide by 10 assuming LM35 (10mV per °C)
		sprintf(Temperature1, "T1:%d%cC", (int)celsius1, DEGREE_SYMBOL);

		// ----- Read temperature from Sensor 2 (Channel 1) -----
		celsius2 = (ADC_Read(1) * 4.88) / 10.0;
		sprintf(Temperature2, "T2:%d%cC", (int)celsius2, DEGREE_SYMBOL);

		// ----- Display both temperatures on second LCD line -----
		LCD_Command(0xC0);         // Move to second line
		LCD_String(Temperature1);  // Display temperature from sensor 1
		LCD_Command(0xC0 + 9);     // Move to 10th character on second line
		LCD_String(Temperature2);  // Display temperature from sensor 2

		_delay_ms(500);            // Wait before next update
	}
	return 0;
}

//header file for lcd
// Define LCD port and pin connections
#define LCD_Data_Dir DDRC // LCD data port direction
#define LCD_Command_Dir DDRD // LCD command port direction
#define LCD_Data_Port PORTC // LCD data port
#define LCD_Command_Port PORTD // LCD command port
#define RS PD7 // Register select pin
#define RW PD6 // Read/write pin
#define EN PD5 // Enable pin

// Function prototypes
void LCD_Command(unsigned char cmnd); // Send command to LCD
void LCD_Char(unsigned char char_data); // Display a single character
void LCD_String(char *str); // Display a string
void LCD_Init(void); // Initialize LCD

// LCD Initialization function
void LCD_Init(void)
{
	LCD_Command_Dir = 0xFF; // Set all command port pins as output
	LCD_Data_Dir = 0xFF; // Set all data port pins as output
	_delay_ms(20); // LCD power-on delay
	LCD_Command(0x38); // 8-bit mode, 2-line display, 5x7 font
	LCD_Command(0x0C); // Display ON, Cursor OFF
	LCD_Command(0x06); // Auto increment cursor
	LCD_Command(0x01); // Clear display screen
	_delay_ms(20); // Wait for commands to execute
	LCD_Command(0x80); // Move cursor to the beginning
}

// Function to send a command to LCD
void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port = cmnd; // Load command to data port
	LCD_Command_Port &= ~(1 << RS); // RS = 0 for command mode
	
	
	LCD_Command_Port &= ~(1 << RW); // RW = 0 for write mode
	LCD_Command_Port |= (1 << EN); // Generate a high-to-low pulse on EN pin
	_delay_ms(1);
	LCD_Command_Port &= ~(1 << EN); // Clear enable pin
	_delay_ms(2); // Wait for LCD to process
}

// Function to display a single character on LCD
void LCD_Char(unsigned char char_data)
{
	LCD_Data_Port = char_data; // Load character to data port
	LCD_Command_Port |= (1 << RS); // RS = 1 for data mode
	LCD_Command_Port &= ~(1 << RW); // RW = 0 for write mode
	LCD_Command_Port |= (1 << EN); // Generate a high-to-low pulse on EN pin
	_delay_ms(1);
	LCD_Command_Port &= ~(1 << EN); // Clear enable pin
	_delay_ms(2); // Wait for LCD to process
}
// Function to display a string on LCD
void LCD_String(char *str)
{
	int i;
	for (i = 0; str[i] != 0; i++) // Loop through each character
	{
		LCD_Char(str[i]); // Send character to LCD
	}
}
