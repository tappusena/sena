//Algoritm
/*1. Push Operation:
   1. Start.
   2. Check if the stack is full (top == size - 1).
      - If full, print "Stack Overflow" and exit.
   3. If the stack is not full:
      - Increment the top index.
      - Insert the new element at `stack[top]`.
   4. End.

 2. Pop Operation:
   1. Start.
   2. Check if the stack is empty (top == -1).
      - If empty, print "Stack Underflow" and exit.
   3. If the stack is not empty:
      - Remove the element at `stack[top]`.
      - Decrement the top index.
   4. End.

 3. Display Operation:
   1. Start.
   2. Check if the stack is empty (top == -1).
      - If empty, print "Stack is empty" and exit.
   3. If not empty:
      - Traverse the stack from `stack[top]` to `stack[0]` and display each element.
   4. End.
*/
struct Stack
{
    
    int top;
    int arr[5];
};

Stack s;

class Stack_array
{

public:
    void push(int num)
    {
        if (s.top == 4)
        {
            cout << "Stack is full" << endl;
        }
        else
        {

            s.top++;
            
            s.arr[s.top] = num;
        }
    }

    void pop()
    {
        if (s.top == -1)
        {
            cout << "Stack is empty" << endl;
        }
        else
        {
            cout << "Removing element :: " << s.arr[s.top] << endl;
            s.top--;
        }
    }

    void display()
    {
        if (s.top == -1)
        {
            cout << "Stack is empty" << endl;
        }
        else
        {
            for (int i = s.top; i > -1; i--)
            {
                cout << s.arr[i] << " ";
            }
        }
        cout<<endl;
    }
    
};

int main()
{
    Stack_array a;
    s.top = -1;

    while (1)
    {

        int choice;
        cout << "\nMenu\n1.Push\n2.Pop\n3.Display\n4.Exiting\n";
        cout << "Enter your choice:: ";
        cin >> choice;

        switch (choice)
        {

        case 1:
            int ele;
            cout << "Enter the element ::";
            cin >> ele;
            a.push(ele);
            break;
        case 2:
            a.pop();
            break;
        case 3:
            a.display();
            break;
        case 4:
            exit(0);
        }
    }
}
