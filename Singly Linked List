//Algorithm
/*1. Algorithm for Creating a Node:
●	Start by creating a new element to store the given value.
●	Set the new element’s value to the provided input.
●	Set the pointer of the new element to indicate it is the last in the sequence.
●	If the sequence is empty:
o	Make this new element the first and last element in the sequence.
●	Else:
o	Link the last element in the sequence to the new element.
o	Update the reference to the last element to this new element.
●	End the process.
2. Algorithm for Displaying the Sequence:
●	Start by setting a reference to the first element in the sequence.
●	If the sequence is empty:
o	Display a message indicating the sequence is empty.
●	Else:
o	While the end of the sequence has not been reached:
▪	Display the value of the current element.
▪	Move to the next element in the sequence.
●	End the process.
3. Algorithm for Inserting at the Front:
●	Start by creating a new element to store the given value.
●	Set the new element’s value to the provided input.
●	Link the new element to the current first element in the sequence.
●	Update the reference to the first element to this new element.
●	End the process.
 
4. Algorithm for Inserting at the Rear:
●	Start by creating a new element to store the given value.
●	Set the new element’s value to the provided input.
●	Set the pointer of the new element to indicate it is the last in the sequence.
●	If the sequence is empty:
o	Make this new element the first element in the sequence.
●	Else:
o	Traverse the sequence to find the last element.
o	Link the last element to the new element.
●	End the process.
 
5. Algorithm for Inserting After a Specified Position:
●	Start by creating a new element to store the given value.
●	Set the new element’s value to the provided input.
●	Traverse the sequence to reach the specified position.
●	Link the new element to the element following the specified position.
●	Link the specified position element to the new element.
●	End the process.
 
6. Algorithm for Deleting the First Element:
●	Start by referencing the first element in the sequence.
●	If the sequence is empty:
o	There is nothing to delete.
●	Else:
o	Update the reference to the first element to the next element in the sequence.
o	Remove the original first element.
o	Display a message indicating the deletion was successful.
●	End the process.
 
7. Algorithm for Deleting the Last Element:
●	Start by referencing the first element and initializing a second reference.
●	If the sequence is empty:
o	There is nothing to delete.
●	Else:
o	Traverse the sequence to reach the last element.
o	Update the pointer of the second-to-last element to indicate it is now the last.
o	Display the value of the deleted element.
o	Remove the last element.
●	End the process.
 
8. Algorithm for Deleting After a Specified Position:
●	Start by referencing the first element and initializing a second reference.
●	Traverse the sequence to reach the specified position.
●	If there is no element following the specified position:
o	There is nothing to delete.
●	Else:
o	Link the specified position element to the element after the one to be deleted.
o	Remove the element after the specified position.
●	End the process.
*/
#include <iostream>
using namespace std;

struct Node
{
    int value;
    Node *nextNode;
};

class SinglyLinkedList
{
private:
    Node *firstNode, *lastNode;

public:
    SinglyLinkedList()
    {
        firstNode = NULL;
        lastNode = NULL;
    }

    void addNode(int data)
    {
        Node *newNode = new Node;
        newNode->value = data;
        newNode->nextNode = NULL;

        if (firstNode == NULL)
        {
            firstNode = newNode;
            lastNode = newNode;
        }
        else
        {
            lastNode->nextNode = newNode;
            lastNode = newNode;
        }
    }

    void insertFront(int data)
    {
        Node *newNode = new Node;
        newNode->value = data;
        newNode->nextNode = firstNode;
        firstNode = newNode;
    }

    void insertEnd(int data)
    {
        Node *newNode = new Node;
        newNode->value = data;
        newNode->nextNode = NULL;

        if (firstNode == NULL)
        {
            firstNode = newNode;
            lastNode = newNode;
        }
        else
        {
            Node *currentNode = firstNode;
            while (currentNode->nextNode != NULL)
            {
                currentNode = currentNode->nextNode;
            }
            currentNode->nextNode = newNode;
            lastNode = newNode;
        }
    }

    void insertAtPosition(int data, int position)
    {
        Node *newNode = new Node;
        newNode->value = data;

        if (position == 0)
        {
            newNode->nextNode = firstNode;
            firstNode = newNode;
            return;
        }

        Node *currentNode = firstNode;
        for (int i = 1; i < position; i++)
        {
            if (currentNode->nextNode == NULL)
            {
                cout << "Position out of bounds" << endl;
                return;
            }
            currentNode = currentNode->nextNode;
        }

        newNode->nextNode = currentNode->nextNode;
        currentNode->nextNode = newNode;
    }

    void deleteFirst()
    {
        if (firstNode == NULL)
        {
            cout << "List is empty, nothing to delete" << endl;
            return;
        }
        Node *tempNode = firstNode;
        firstNode = firstNode->nextNode;
        delete tempNode;
    }

    void deleteLast()
    {
        if (firstNode == NULL)
        {
            cout << "List is empty, nothing to delete" << endl;
            return;
        }
        if (firstNode->nextNode == NULL)
        {
            delete firstNode;
            firstNode = NULL;
            lastNode = NULL;
            return;
        }
        Node *currentNode = firstNode;
        while (currentNode->nextNode->nextNode != NULL)
        {
            currentNode = currentNode->nextNode;
        }
        delete currentNode->nextNode;
        currentNode->nextNode = NULL;
        lastNode = currentNode;
    }

    void deleteAtPosition(int position)
    {
        if (firstNode == NULL)
        {
            cout << "List is empty, nothing to delete" << endl;
            return;
        }
        if (position == 0)
        {
            deleteFirst();
            return;
        }
        Node *currentNode = firstNode;
        for (int i = 1; i < position; i++)
        {
            if (currentNode->nextNode == NULL)
            {
                cout << "Position out of bounds" << endl;
                return;
            }
            currentNode = currentNode->nextNode;
        }
        Node *tempNode = currentNode->nextNode;
        if (tempNode == NULL)
        {
            cout << "Position out of bounds" << endl;
            return;
        }
        currentNode->nextNode = tempNode->nextNode;
        delete tempNode;
    }

    void displayList()
    {
        Node *tempNode = firstNode;
        if (tempNode == NULL)
        {
            cout << "List is empty" << endl;
            return;
        }
        while (tempNode != NULL)
        {
            cout << tempNode->value << " ";
            tempNode = tempNode->nextNode;
        }
        cout << endl;
    }
};

int main()
{
    SinglyLinkedList list;
    int option, data, position;

    while (1)
    {
        cout << endl << "Please choose the operation to be performed\n";
        cout << "1. Add node at front\n";
        cout << "2. Add node at end\n";
        cout << "3. Add node at specific position\n";
        cout << "4. Delete node from start\n";
        cout << "5. Delete node from end\n";
        cout << "6. Delete node from specific position\n";
        cout << "7. Display list\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> option;

        switch (option)
        {
        case 1:
            cout << "Enter the value to be added at the front: ";
            cin >> data;
            list.insertFront(data);
            break;

        case 2:
            cout << "Enter the value to be added at the end: ";
            cin >> data;
            list.insertEnd(data);
            break;

        case 3:
            cout << "Enter the value to be added: ";
            cin >> data;
            cout << "Enter the position: ";
            cin >> position;
            list.insertAtPosition(data, position);
            break;

        case 4:
            list.deleteFirst();
            break;

        case 5:
            list.deleteLast();
            break;

        case 6:
            cout << "Enter the position: ";
            cin >> position;
            list.deleteAtPosition(position);
            break;

        case 7:
            list.displayList();
            break;

        case 8:
            exit(0);

        default:
            cout << "Invalid choice" << endl;
        }
    }

    return 0;
}
